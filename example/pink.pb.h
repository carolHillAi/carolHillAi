// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pink.proto

#ifndef PROTOBUF_pink_2eproto__INCLUDED
#define PROTOBUF_pink_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pink {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pink_2eproto();
void protobuf_AssignDesc_pink_2eproto();
void protobuf_ShutdownFile_pink_2eproto();

class Ping;

enum Ping_Type {
  Ping_Type_PING = 0,
  Ping_Type_PONG = 1
};
bool Ping_Type_IsValid(int value);
const Ping_Type Ping_Type_Type_MIN = Ping_Type_PING;
const Ping_Type Ping_Type_Type_MAX = Ping_Type_PONG;
const int Ping_Type_Type_ARRAYSIZE = Ping_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ping_Type_descriptor();
inline const ::std::string& Ping_Type_Name(Ping_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ping_Type_descriptor(), value);
}
inline bool Ping_Type_Parse(
    const ::std::string& name, Ping_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ping_Type>(
    Ping_Type_descriptor(), name, value);
}
// ===================================================================

class Ping : public ::google::protobuf::Message {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Ping_Type Type;
  static const Type PING = Ping_Type_PING;
  static const Type PONG = Ping_Type_PONG;
  static inline bool Type_IsValid(int value) {
    return Ping_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Ping_Type_Type_MIN;
  static const Type Type_MAX =
    Ping_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Ping_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Ping_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Ping_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Ping_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pink.Ping.Type t = 1;
  inline bool has_t() const;
  inline void clear_t();
  static const int kTFieldNumber = 1;
  inline ::pink::Ping_Type t() const;
  inline void set_t(::pink::Ping_Type value);

  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pink.Ping)
 private:
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  int t_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_pink_2eproto();
  friend void protobuf_AssignDesc_pink_2eproto();
  friend void protobuf_ShutdownFile_pink_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// Ping

// required .pink.Ping.Type t = 1;
inline bool Ping::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ping::set_has_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ping::clear_has_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ping::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline ::pink::Ping_Type Ping::t() const {
  return static_cast< ::pink::Ping_Type >(t_);
}
inline void Ping::set_t(::pink::Ping_Type value) {
  assert(::pink::Ping_Type_IsValid(value));
  set_has_t();
  t_ = value;
}

// required string address = 2;
inline bool Ping::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ping::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ping::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ping::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Ping::address() const {
  return *address_;
}
inline void Ping::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Ping::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Ping::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ping::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Ping::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ping::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool Ping::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ping::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ping::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ping::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Ping::port() const {
  return port_;
}
inline void Ping::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pink

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pink::Ping_Type>() {
  return ::pink::Ping_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pink_2eproto__INCLUDED
